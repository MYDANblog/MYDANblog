import pandas as pd
from pandas import DataFrame
import pickle			
from pickle import TRUE			
import jpype			
import asposecells			
jpype.startJVM()			
from asposecells.api import License, Workbook, CellsHelper, CalculationOptions, SaveFormat, PdfSaveOptions, PivotFieldType, PivotTableStyleType, PivotFieldSubtotalType, LoadOptions, FileFormatType, ShiftType, CellArea, PasteOptions			

try:
    lic = License()
    lic.setLicense("/opt/knime_server/aspose/Aspose.Cells.Product.Family.lic")
except:
    pass

Filepath = flow_variables['output_Working_filePath']

# Load KNIME Data table to Pandas Dataframe
df1 = input_table_1.copy()

#Use openpyxl to open Excel file
wb = Workbook(Filepath)

# Insert Formula ###############################################################

# Loop through List of Sheets
sheet_lst = pd.unique(df1['Sheet_Position'])

for l in sheet_lst:
    sheet = l
    ws = wb.getWorksheets().get(sheet)
    df4 = df1[df1['Sheet_Position'] == sheet]
    for row in df4.itertuples(index=True, name='Pandas'):
        # Set the cell to be updated
        cell = getattr(row, "Cell_Address")
        # Update the Sheet / Cell with the Value
        formula = getattr(row, "Formula")
        autofill = getattr(row, "AutoFill")
        src_range = getattr(row, "Source_Range")
        dest_range = getattr(row, "Dest_Range")
        if str(formula.startswith("{")) == "True": #check if formula is an array formula
            array_formula = formula[1:] #remove first character {
            array_formula = array_formula[:-1] #remove last character }
            ws.getCells().get(cell).setArrayFormula(array_formula, 1, 1) #apply CTRL+SHIFT+ENTER
        else: #run regular formula
            f = "=" + formula
            try: #try running formula as is
                ws.getCells().get(cell).setFormula(f)
            except: #else insert single quote
                g = "='" + formula
                ws.getCells().get(cell).setFormula(g)
        try:
            if autofill == "YES":
                src = ws.getCells().createRange(src_range)
                options = PasteOptions()
                options.setPasteType(8)
                dst = ws.getCells().createRange(dest_range)
                dst.copy(src, options)
            else:
                pass
        except:
            pass

wb.calculateFormula() #refresh formula
try:
    wb.getWorksheets().removeAt("Evaluation Warning")
except:
    pass
wb.save(Filepath, FileFormatType.XLSX) #saves as XLSX filetype	
jpype.shutdownJVM()	

output_table_1 = pd.DataFrame({"Location":[Filepath]})
